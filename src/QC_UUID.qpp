/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_UUID.qpp UUID class definition

  uuid Qore module

  Copyright (C) 2010 - 2012 David Nichols

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "uuid-module.h"

/** @defgroup uuid_generation_constants UUID Generation Constants
 */
//@{
namespace Qore::UUID;
//! No value; this is the default
const None = QUF_NONE;

//! Force the use of the all-random UUID format, even if a high-quality random number generator is not available for the library
const Random = QUF_RANDOM;

//! Force the use of the alternative algorithm that uses the current time and local ethernet MAC address (if available); note that this algorithm can leak information about when and where  the UUID was generated
const Time = QUF_TIME;

//! The UUID will be assigned the null value on creation
const Empty = QUF_EMPTY;

//! If case is supported in the UUID::toString() method; this is always True
const HAVE_UNPARSE_CASE = True;
//@}

/** @defgroup uuid_formatting_constants UUID Formatting Constants
 */
namespace Qore::UUID;
//@{
//! All alphebetic hexadecimal characters will be in upper case
const UpperCase = QUF_UPPER_CASE;

//! All alphebetic hexadecimal characters will be in lower case; this is the default
const LowerCase = QUF_LOWER_CASE;
//@}

//! The UUID class provides methods that allow UUIDs to be created, manipulated, and parsed
/** 
 */
qclass UUID [arg=QoreUUID* uuid;ns=Qore::UUID];

//! Generates a UUID
/** @param flags @ref uuid_generation_constants combined with binary or to affect how the UUID is generated

    @par Examples:
    - to generate a UUID using the default algorithm:
    @code
my UUID $uuid();
    @endcode
    - to make a UUID object from an explicit value:
    @code
my UUID $uuid("93c40733-9b99-46c6-91a5-f3989067dc1e");
    @endcode
    - to create a UUID with the null value:
    @code
my UUID $uuid(UUID::Empty);
    @endcode
 */
UUID::constructor(int flags = {Qore::UUID::None}QUF_NONE) {
   self->setPrivate(CID_UUID, new QoreUUID((int)flags));
}

//! parses a string to construct a UUID
/** @param uuid_str a UUID string in a format as in the following example: \c "93c40733-9b99-46c6-91a5-f3989067dc1e"

    @par Example:
    - to make a UUID object from an explicit value:
    @code
my UUID $uuid("93c40733-9b99-46c6-91a5-f3989067dc1e");
    @endcode

    @throw UUID-STRING-ERROR invalid UUID string (invalid format, invalid characters, etc)
 */
UUID::constructor(string uuid_str) {
   SimpleRefHolder<QoreUUID> uuid(new QoreUUID(*uuid_str, xsink));
   if (*xsink)
      return;
 
   self->setPrivate(CID_UUID, uuid.release());
}

//! Creates an exact copy of the UUID object
/** 
    @par Example:
    @code
my UUID $new_uuid = $uuid.copy();
    @endcode
 */
UUID::copy() {
   self->setPrivate(CID_UUID, new QoreUUID(*uuid));
}

//! Returns the string representation of the UUID
/** @param flag one of the @ref uuid_formatting_constants to affect the formatting of the %UUID string output

    @return the string representation of the UUID, ex: \c "f5c5fd74-5b3e-4f02-8772-f8a80da9b028"

    @par Example:
    @code
my string $str = $uuid.toString();
    @endcode
 */
string UUID::toString(int flag = {Qore::UUID::LowerCase}QUF_LOWER_CASE) [flags=CONSTANT] {
   return uuid->toString((int)flag);
}

//! Returns True if the current %UUID is the null %UUID, or False if not
/** @return True if the current %UUID is the null %UUID, or False if not

    @par Example:
    @code
my bool $b = $uuid.isNull();
    @endcode
 */
bool UUID::isNull() [flags=CONSTANT] {
   return get_bool_node(uuid->isNull());
}

//! Clears the UUID and sets the null value (\c "00000000-0000-0000-0000-000000000000")
/** 
 */
nothing UUID::clear() {
   uuid->clear();
}

//! Generates a new UUID value for the object; the current value of the UUID object is overwritten with the newly-generated value
/** @param flags @ref uuid_generation_constants combined with binary or to affect how the UUID is generated

    @par Examples:
    - to generate a UUID using the default algorithm:
    @code
$uuid.generate();
    @endcode
    - to create a UUID with the null value:
    @code
$uuid.generate(UUID::Empty);
    @endcode
 */
nothing UUID::generate(int flags = {Qore::UUID::None}QUF_NONE) {
   uuid->generate((int)flags);
}

//! Compares the current UUID with another UUID and returns -1, 0, or 1 if the other UUID is greater than, equal to, or less than the current UUID respectively
/** @param other the other UUID to compare
    
    @return -1, 0, or 1 if the other UUID is greater than, equal to, or less than the current UUID respectively

    @par Example:
    @code
my int $rc = $uuid.compare($other_uuid);
    @endcode
 */
int UUID::compare(UUID[QoreUUID] other) [flags=CONSTANT] {
   SimpleRefHolder<QoreUUID> holder(other);

   return uuid->compare(*other);
}

//! sets the UUID from the given string
/** @param uuid_str a UUID string in a format as in the following example: \c "93c40733-9b99-46c6-91a5-f3989067dc1e"

    @par Example:
    @code
$uuid.set("93c40733-9b99-46c6-91a5-f3989067dc1e");
    @endcode

    @throw UUID-STRING-ERROR invalid UUID string (invalid format, invalid characters, etc)
 */
nothing UUID::set(string uuid_str) {
   uuid->set(*uuid_str, xsink);
}

//! Returns a UUID string without having to create a UUID object
/** @param str_flag one of the @ref uuid_formatting_constants to affect the formatting of the %UUID string output
    @param gen_flags @ref uuid_generation_constants combined with binary or to affect how the UUID is generated
    
    @return the string representation of the UUID according to the arguments, ex: \c "f5c5fd74-5b3e-4f02-8772-f8a80da9b028"
 */
static string UUID::get(int str_flag = {Qore::UUID::LowerCase}QUF_LOWER_CASE, int gen_flags = {Qore::UUID::None}QUF_NONE) [flags=CONSTANT] {
   return QoreUUID::get((int)str_flag, (int)gen_flags);
}
